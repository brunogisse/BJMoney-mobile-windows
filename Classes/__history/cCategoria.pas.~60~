unit cCategoria;

interface

uses Firedac.Comp.Client, FireDAC.DApt, System.SysUtils, FMX.Graphics;

type
    TCategoria = class
    private
        Fconn         : TFDConnection;
        FID_CATEGORIA : Integer;
        FDESCRICAO    : string;
        FICONE        : TBitmap;
        FINDICE_ICONE : Integer;
    public
        constructor Create(conn : TFDConnection);

        property ID_CATEGORIA : Integer read FID_CATEGORIA write FID_CATEGORIA;
        property DESCRICAO    : string read FDESCRICAO write FDESCRICAO;
        property ICONE        : TBitmap read FICONE write FICONE;
        property INDICE_ICONE : Integer read FINDICE_ICONE write FINDICE_ICONE;

        function ListarCategoria(out erro : string) : TFDQuery;
        function Inserir(out erro : string) : Boolean;
        function Alterar(out erro: string): Boolean;
        function Excluir(out erro: string): Boolean;
end;

implementation

{ TCategoria }

constructor TCategoria.Create(conn: TFDConnection);
begin
    Fconn := conn;
end;

function TCategoria.ListarCategoria(out erro: string): TFDQuery;
var
    qry : TFDQuery;
begin
    try
        qry := TFDQuery.Create(nil);
        qry.Connection := Fconn;

        with qry do
        begin
            Active := False;
            SQL.Clear;
            SQL.Add('SELECT * FROM TAB_CATEGORIA');
            SQL.Add('where 1 = 1');

            if ID_CATEGORIA > 0 then
            begin
              SQL.Add('AND ID_CATEGORIA = :ID_CATEGORIA');
              ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
            end;
            Active := True;
        end;
        Result := qry;
        erro := '';
    except
        on E : exception do
        begin
           Result := nil;
           erro   := 'Erro ao consultar as categorias: ' + E.Message;
        end;
    end;
end;

function TCategoria.Inserir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin

    if DESCRICAO = '' then
    begin
        erro := 'Informe a Descrição';
        Result := False;
        exit;
    end;

    try
        try
           qry := TFDQuery.Create(nil);
           qry.Connection := Fconn;

            with qry do
            begin
                Active := False;
                SQL.Clear;
                SQL.Add('INSERT INTO TAB_CATEGORIA (DESCRICAO, ICONE, INDICE_ICONE) ');
                SQL.Add('VALUES (:DESCRICAO, :ICONE, :INDICE_ICONE)');
                ParamByName('DESCRICAO').Value := DESCRICAO;
                ParamByName('ICONE').Assign(ICONE);
                ParamByName('INDICE_ICONE').Value := INDICE_ICONE;
                ExecSQL;
            end;

            Result := True;
            erro := '';
        except
            on E : exception do
            begin
                Result := False;
                erro := 'Erro ao inserir: ' + E.Message;
            end;
        end;

    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.Alterar(out erro: string): Boolean;
var
    qry : TFDQuery;
begin

    if ID_CATEGORIA <= 0 then
    begin
        erro := 'Informe ID da Categoria';
        Result := False;
        exit;
    end;

    if DESCRICAO = '' then
    begin
        erro := 'Informe a Descrição';
        Result := False;
        exit;
    end;


    try
        try
           qry := TFDQuery.Create(nil);
           qry.Connection := Fconn;

            with qry do
            begin
                Active := False;
                SQL.Clear;
                SQL.Add('UPDATE TAB_CATEGORIA SET DESCRICAO = :DESCRICAO, ICONE = :ICONE, INDICE_ICONE = :INDICE_ICONE ');
                SQL.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
                ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
                ParamByName('DESCRICAO').Value := DESCRICAO;
                ParamByName('INDICE_ICONE').Value := INDICE_ICONE;
                ParamByName('ICONE').Assign(ICONE);
                ExecSQL;
            end;

            Result := True;
            erro := '';
        except
            on E : exception do
            begin
                Result := False;
                erro := 'Erro ao alterar a Categoria: ' + E.Message;
            end;
        end;

    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.Excluir(out erro: string): Boolean;
var
    qry     : TFDQuery;
    AuxErro : string;
begin

    if ID_CATEGORIA <= 0 then
    begin
        erro := 'Informe ID da Categoria';
        Result := False;
        exit;
    end;

    try
        try
           qry := TFDQuery.Create(nil);
           qry.Connection := Fconn;

            with qry do
            begin
                Active := False;
                SQL.Clear;
                SQL.Add('DELETE FROM TAB_CATEGORIA ');
                SQL.Add('WHERE ID_CATEGORIA = :ID_CATEGORIA');
                ParamByName('ID_CATEGORIA').Value := ID_CATEGORIA;
                ExecSQL;
            end;

            Result := True;
            erro := '';
        except
              on E : exception do
            begin
                 Result := False;
                 AuxErro := Copy(E.Message, 32, 61);
              if AuxErro = 'FOREIGN KEY constraint failed' then
                 erro := 'A Categoria possui lançamentos e não pode ser excluída'
              else
                 erro := 'erro ao excluir a categoria: ' + #13 + #13 +E.Message;
              end;
        end;

    finally
        qry.DisposeOf;
    end;
end;

end.
